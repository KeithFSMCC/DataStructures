/**
 * File: Song.java
 * **********************************************************************
 *                     Revision History (newest first)
 ************************************************************************
 *
 * 2025-09-08 - Keith and Vivek - Added nested static comparator CmpArtist
 *                      (case-insensitive, instrumented with cmpCnt++)
 *                      and comparator tests in main().
 * 8.2016 - Anne Applin - formatting and JavaDoc skeletons added
 * 2015 -   Prof. Bob Boothe - Starting code and main for testing
 ************************************************************************
 */
package student;

import java.util.*;

/**
 * Song class to hold strings for a song's artist, title, and lyrics
 * Do not add any methods for part 1, just implement the ones that are
 * here.
 * @author boothe
 */
public class Song implements Comparable {
    // Author: Keith â€” private fields required by constructor/getters
    private String artist;
    private String title;
    private String lyrics;

    /**
     * Parameterized constructor
     * @param artist the author of the song
     * @param title the title of the song
     * @param lyrics the lyrics as a string with linefeeds embedded
     */
    // Author Keith  null-safe initialization
    public Song(String artist, String title, String lyrics) {
        this.artist = (artist == null) ? "" : artist;
        this.title  = (title  == null) ? "" : title;
        this.lyrics = (lyrics == null) ? "" : lyrics;
    }

    /** @return artist */
    public String getArtist() { return artist; }
    /** @return lyrics */
    public String getLyrics() { return lyrics; }
    /** @return title */
    public String getTitle()  { return title; }

    /**
     * returns name and title ONLY on one line in the form: artist, "title"
     */
    // Author: Keith and Vivek formatted for testing/GUI
    public String toString() { return artist + ", \"" + title + "\""; }

    /**
     * Natural order: artist (case-insensitive), then title.
     */
    @Override
    public int compareTo(Object that) {
        if (that == null) return -1;
        Song other = (Song) that;
        int byArtist = this.artist.compareToIgnoreCase(other.artist);
        if (byArtist != 0) return byArtist;
        return this.title.compareToIgnoreCase(other.title);
    }

    // Author Keith and Vivek  Part II Task 1:
    // Nested static comparator by artist (case-insensitive), instrumented.
    // Extends CmpCnt so we can count comparisons with cmpCnt++.
    
    public static class CmpArtist extends CmpCnt implements Comparator<Song> {
        @Override
        public int compare(Song s1, Song s2) {
            cmpCnt++; // instrumentation for Part II analysis
            return s1.getArtist().compareToIgnoreCase(s2.getArtist());
        }
    }

    /**
     * testing method to unit test this class
     */
    public static void main(String[] args) {
        Song s1 = new Song("Professor B",
                "Small Steps",
                "Write your programs in small steps\n"
                + "small steps, small steps\n"
                + "Write your programs in small steps\n"
                + "Test and debug every step of the way.\n");

        Song s2 = new Song("Brian Dill",
                "Ode to Bobby B",
                "Professor Bobby B., can't you see,\n"
                + "sometimes your data structures mystify me,\n"
                + "the biggest algorithm pro since Donald Knuth,\n"
                + "here he is, he's Robert Boothe!\n");

        Song s3 = new Song("Professor B",
                "Debugger Love",
                "I didn't used to like her\n"
                + "I stuck with what I knew\n"
                + "She was waiting there to help me,\n"
                + "but I always thought print would do\n\n"
                + "Debugger love .........\n"
                + "Now I'm so in love with you\n");

        System.out.println("testing getArtist: " + s1.getArtist());
        System.out.println("testing getTitle: " + s1.getTitle());
        System.out.println("testing getLyrics:\n" + s1.getLyrics());

        System.out.println("testing toString:\n");
        System.out.println("Song 1: " + s1);
        System.out.println("Song 2: " + s2);
        System.out.println("Song 3: " + s3);

        System.out.println("testing compareTo:");
        System.out.println("Song1 vs Song2 = " + s1.compareTo(s2));
        System.out.println("Song2 vs Song1 = " + s2.compareTo(s1));
        System.out.println("Song1 vs Song3 = " + s1.compareTo(s3));
        System.out.println("Song3 vs Song1 = " + s3.compareTo(s1));
        System.out.println("Song1 vs Song1 = " + s1.compareTo(s1));

        
        // Author Keith  Part II Task 1 comparator consistency tests
        System.out.println("\nTesting CmpArtist comparator:");
        CmpArtist cmp = new CmpArtist();
        System.out.println("s1 vs s2 = " + cmp.compare(s1, s2));
        System.out.println("s2 vs s1 = " + cmp.compare(s2, s1));
        System.out.println("s1 vs s3 = " + cmp.compare(s1, s3));
        System.out.println("s3 vs s1 = " + cmp.compare(s3, s1));
        System.out.println("Comparator calls so far (cmpCnt): " + cmp.getCmpCnt());
        cmp.resetCmpCnt(); // use resetCmpCnt() to match your CmpCnt.java
    }
}
